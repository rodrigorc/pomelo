/** Parser module if `%extra_argument ExtraArgument;` is used. */
pub mod parser {
    #[doc(hidden)]
    pub struct Input;
    #[doc(hidden)]
    pub struct Error;
    #[doc(hidden)]
    pub struct ExtraArgument;

    /** The token enum. These are the values generated by your tokenizer. */
    pub enum Token {}

    /** The main parser class. It wraps a value of `ExtraArgument` type.*/
    pub struct Parser {
        extra: ExtraArgument,
    }
    impl Parser {
        /** To create a new `Parser` object you need to specify a value for the `extra` contained
        value */
        pub fn new(extra: ExtraArgument) -> Self {
            unreachable!()
        }
        /** Adds a token to the parser input. It may return an error or `Ok(())`. */
        pub fn parse(&mut self, token: Token) -> Result<(), Error> {
            unreachable!()
        }
        /** Adds the special `end_of_input` token to the input and then consumes the parser.
        If it succeeds, it returns `Ok((input, extra))`, being `input` the associated value to
        the start symbol (or `()` if none), and `extra` the wrapped extra value. */
        pub fn end_of_input(self) -> Result<(Input, ExtraArgument), Error> {
            unreachable!()
        }
        /** Consumes the parser and returns the wrapped `extra` value. */
        pub fn into_extra(self) -> ExtraArgument {
            self.extra
        }
        /** Gets a reference to the wrapped `extra` value. */
        pub fn extra(&self) -> &ExtraArgument {
            &self.extra
        }
        /** Gets a mutable reference to the wrapped `extra` value. */
        pub fn extra_mut(&mut self) -> &mut ExtraArgument {
            &mut self.extra
        }
    }
}
