/** Parser module if `%extra_argument ExtraArgument;` is not used. */
pub mod parser {
    #[doc(hidden)]
    pub struct Input;
    #[doc(hidden)]
    pub struct Error;

    /** The token enum. These are the values generated by your tokenizer. */
    pub enum Token {}

    /** The main parser class. It wraps a value of `ExtraArgument` type.*/
    pub struct Parser {
        _x: (),
    }
    impl Parser {
        /** Creates a new `Parser` object. */
        pub fn new() -> Self {
            unreachable!()
        }
        /** Adds a token to the parser input. It may return an error or `Ok(())`. */
        pub fn parse(&mut self, token: Token) -> Result<(), Error> {
            unreachable!()
        }
        /** Adds the special `end_of_input` token to the input and then consumes the parser.
        If it succeeds, it returns `Ok(input)`, being `input` the associated value to
        the start symbol (or `()` if none). */
        pub fn end_of_input(self) -> Result<Input, Error> {
            unreachable!()
        }
    }
}
